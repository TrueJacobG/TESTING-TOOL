TODO:
fix printing in say() tuples, list, etc
test everything in PROJECTS (and add gitignore for test files + rewrite the programs)
test edge cases for example if int;int;int give 0 0, 0 1, 1 0, big numbers etc.
so -> random tests HARD:



DONE:
python3.10 testingtool.py file.py

test file types -> str, int, float, bool, List[str, int, float, bool]
expectations file name -> like a file, but with .test

test file example
square;int;int;int
# func name ;arg1 type; arg2 type; result1 type
1:2;2
1:3;3
2:3;6
# arg1|arg2;result1

test if files exist's

option live to see which case passing
-live 
if something wrong then it stops testing
else write good results

YOU CAN'T USE WORD 'def' IN YOUR FILE(in comments or in strings)

in .py.test in strings you can't use ";" and "|", because they are separators

checking if types in .py are equal to .py.test

do mypy before testing

check if inputs in .py.test are correct type

test if .py.test file exist

colors in func for example -> say("Hi!", color="red") <- error etc

everything in class based formula

lists are now compatible

works only with python3.10

to_type recursion

localization of the code

if func is in .py.test but not in .py ERROR

functions_lists -> are now -> functions_dicts 

if func is in .py but not in .py.test good

you don't have to worry about imports in fortest.py :D

fix py file scraping

sets and dicts are now compatible

print mypy errors

-time -> measure time of testing func

-utilities -> version of testing framework, python ver, mypy ver itd

script sh to run like a program

floats are now fixed

tuple added

BETA -> check every function in directory

searching in python file with re


FLAGS:
filename
-live -> passing test visualizations
-types -> checking types visualizations
-time -> measure time of executation
-utilities -> informations about testing tool, req python and mypy versions etc.
--help -> print help

COLORS:
red -> error
yellow -> warning, problem with testing_tool
green -> ok
blue -> types are correct


FIXME: without mypy arrows (without mypy)
FIXME: later: import -> run testing tool on functions
FIXME: exp. import testingtool
FIXME: testingtool.ad(func1, args=[int, int])
FIXME: class tests